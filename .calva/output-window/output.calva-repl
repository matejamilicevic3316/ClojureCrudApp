; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Connecting ...
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉crudapp.core꞉> (sqlQueryExecutor.sqlqueryhelper/get-product 1)
({:productid 1, :price 5, :name "VOX TV", :description "Vox TV is best opinion", :src "voxtv.jpg", :alt "vox tv", :producttypename "TV"})
clj꞉crudapp.core꞉> (assoc (sqlQueryExecutor.sqlqueryhelper/get-product 1) :qty 5)
; Execution error (ClassCastException) at crudapp.core/eval9477 (form-init16091169390996019394.clj:19).
; class clojure.lang.LazySeq cannot be cast to class clojure.lang.Associative (clojure.lang.LazySeq and clojure.lang.Associative are in unnamed module of loader 'app')
clj꞉crudapp.core꞉> (assoc (sqlQueryExecutor.sqlqueryhelper/get-product 1) :qty 5)
; Execution error (ClassCastException) at crudapp.core/eval9489 (form-init16091169390996019394.clj:22).
; class clojure.lang.LazySeq cannot be cast to class clojure.lang.Associative (clojure.lang.LazySeq and clojure.lang.Associative are in unnamed module of loader 'app')
clj꞉crudapp.core꞉> (let [cart (sqlQueryExecutor.sqlqueryhelper/get-product 1)](for [product (distinct (vec cart)) 
                                    :let [cart-line 
                                        (assoc product :qty 
                                            (get-cart-product-count (:productid product) cart) :totalPrice (* (get-cart-product-count (:productid product) cart) (:price product)))]] cart-line))
; Syntax error compiling at (c:\Users\mateja.milicevic\Desktop\Clojure\crudapp\.calva\output-window\output.calva-repl:1:1748).
; Unable to resolve symbol: cart-line in this context
clj꞉crudapp.core꞉> (let [cart (sqlQueryExecutor.sqlqueryhelper/get-product 1)](for [product (distinct (vec cart)) 
                                    :let [cart-line 
                                        (assoc product :qty 
                                            (get-cart-product-count (:productid product) cart) :totalPrice (* (get-cart-product-count (:productid product) cart) (:price product)))]] cart-line))
; Syntax error compiling at (c:\Users\mateja.milicevic\Desktop\Clojure\crudapp\.calva\output-window\output.calva-repl:34:45).
; Unable to resolve symbol: get-cart-product-count in this context
clj꞉crudapp.core꞉> (shophelpers.shophandler (let [cart (sqlQueryExecutor.sqlqueryhelper/get-product 1)](for [product (distinct (vec cart)) 
                                    :let [cart-line 
                                        (assoc product :qty 
                                            (get-cart-product-count (:productid product) cart) :totalPrice (* (get-cart-product-count (:productid product) cart) (:price product)))]] cart-line)))
; Syntax error compiling at (c:\Users\mateja.milicevic\Desktop\Clojure\crudapp\.calva\output-window\output.calva-repl:40:45).
; Unable to resolve symbol: get-cart-product-count in this context
clj꞉crudapp.core꞉> (shophelpers.shophandler/fn[] (let [cart (sqlQueryExecutor.sqlqueryhelper/get-product 1)](for [product (distinct (vec cart)) 
                                    :let [cart-line 
                                        (assoc product :qty 
                                            (get-cart-product-count (:productid product) cart) :totalPrice (* (get-cart-product-count (:productid product) cart) (:price product)))]] cart-line)))
; Syntax error compiling at (c:\Users\mateja.milicevic\Desktop\Clojure\crudapp\.calva\output-window\output.calva-repl:46:45).
; Unable to resolve symbol: get-cart-product-count in this context
clj꞉crudapp.core꞉> (shophelpers.shophandler/fn[] (let [cart (sqlQueryExecutor.sqlqueryhelper/get-product 1)](for [product (distinct (vec cart)) 
                                    :let [cart-line 
                                        (assoc product :qty 
                                            (get-cart-product-count (:productid product) cart) :totalPrice (* (get-cart-product-count (:productid product) cart) (:price product)))]] cart-line)))
; Syntax error compiling at (c:\Users\mateja.milicevic\Desktop\Clojure\crudapp\.calva\output-window\output.calva-repl:49:20).
; No such var: shophelpers.shophandler/fn
clj꞉crudapp.core꞉> ((defn get-cart-product-count [id cart] (count (filter #(= (:productid %) id) cart))))
; Execution error (ArityException) at crudapp.core/eval10007 (form-init16091169390996019394.clj:55).
; Wrong number of args (0) passed to: crudapp.core/eval10007/get-cart-product-count--10008
clj꞉crudapp.core꞉> (defn get-cart-product-count [id cart] (count (filter #(= (:productid %) id) cart)))
#'crudapp.core/get-cart-product-count
clj꞉crudapp.core꞉> (let [cart (sqlQueryExecutor.sqlqueryhelper/get-product 1)](for [product (distinct (vec cart)) 
                                    :let [cart-line 
                                        (assoc product :qty 
                                            (get-cart-product-count (:productid product) cart) :totalPrice (* (get-cart-product-count (:productid product) cart) (:price product)))]] cart-line))
({:description "Vox TV is best opinion", :producttypename "TV", :alt "vox tv", :name "VOX TV", :totalPrice 5, :src "voxtv.jpg", :productid 1, :qty 1, :price 5})
clj꞉crudapp.core꞉> (def cart-data (let [cart (sqlQueryExecutor.sqlqueryhelper/get-product 1)](for [product (distinct (vec cart)) 
                                    :let [cart-line 
                                        (assoc product :qty 
                                            (get-cart-product-count (:productid product) cart) :totalPrice (* (get-cart-product-count (:productid product) cart) (:price product)))]] cart-line)))
({:description "Vox TV is best opinion", :producttypename "TV", :alt "vox tv", :name "VOX TV", :totalPrice 5, :src "voxtv.jpg", :productid 1, :qty 1, :price 5})
clj꞉crudapp.core꞉> cart-data
; Syntax error compiling at (c:\Users\mateja.milicevic\Desktop\Clojure\crudapp\.calva\output-window\output.calva-repl:1:1748).
; Unable to resolve symbol: cart-data in this context
clj꞉crudapp.core꞉> cart-data
; Syntax error compiling at (c:\Users\mateja.milicevic\Desktop\Clojure\crudapp\.calva\output-window\output.calva-repl:1:1748).
; Unable to resolve symbol: cart-data in this context
clj꞉crudapp.core꞉> (sqlQueryExecutor.sqlqueryhelper/add-order-articles 2 (let [cart (sqlQueryExecutor.sqlqueryhelper/get-product 1)](for [product (distinct (vec cart)) 
                                    :let [cart-line 
                                        (assoc product :qty 
                                            (get-cart-product-count (:productid product) cart) :totalPrice (* (get-cart-product-count (:productid product) cart) (:price product)))]] cart-line)))
({:description "Vox TV is best opinion", :producttypename "TV", :alt "vox tv", :name "VOX TV", :totalPrice 5, :src "voxtv.jpg", :productid 1, :qty 1, :price 5})
clj꞉crudapp.core꞉> (sqlQueryExecutor.sqlqueryhelper/add-order-articles 2 (let [cart (sqlQueryExecutor.sqlqueryhelper/get-product 1)](for [product (distinct (vec cart)) 
                                    :let [cart-line 
                                        (assoc product :qty 
                                            (get-cart-product-count (:productid product) cart) :totalPrice (* (get-cart-product-count (:productid product) cart) (:price product)))]] cart-line)))
nil
clj꞉crudapp.core꞉> (sqlQueryExecutor.sqlqueryhelper/add-order-articles 2 (let [cart (sqlQueryExecutor.sqlqueryhelper/get-product 1)](for [product (distinct (vec cart)) 
                                    :let [cart-line 
                                        (assoc product :qty 
                                            (get-cart-product-count (:productid product) cart) :totalPrice (* (get-cart-product-count (:productid product) cart) (:price product)))]] cart-line)))
nil
clj꞉crudapp.core꞉> 
; nREPL Connection was closed
